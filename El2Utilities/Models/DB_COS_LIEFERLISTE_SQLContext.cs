// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Configuration;
using Microsoft.EntityFrameworkCore;

namespace El2Utilities.Models;

public partial class DB_COS_LIEFERLISTE_SQLContext : DbContext
{
    public DB_COS_LIEFERLISTE_SQLContext()
    {
    }

    public DB_COS_LIEFERLISTE_SQLContext(DbContextOptions<DB_COS_LIEFERLISTE_SQLContext> options)
        : base(options)
    {
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {

            optionsBuilder.UseSqlServer(ConfigurationManager
                .ConnectionStrings["Lieferliste_WPF.Properties.Settings.ConnectionString"].ToString());
        }
    }

    public virtual DbSet<Costunit> Costunit { get; set; }

    public virtual DbSet<Permission> Permission { get; set; }

    public virtual DbSet<PermissionRoles> PermissionRoles { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<User> User { get; set; }

    public virtual DbSet<WorkArea> WorkArea { get; set; }

    

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Costunit>(entity =>
        {
            entity.Property(e => e.CostunitId)
                .ValueGeneratedNever()
                .HasColumnName("costunitID");
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.PlanRelevance).HasColumnName("plan_relevance");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.PKey);

            entity.Property(e => e.PKey)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("pKey");
            entity.Property(e => e.Categorie).HasMaxLength(50);
            entity.Property(e => e.Description).HasColumnType("ntext");
        });

        modelBuilder.Entity<PermissionRoles>(entity =>
        {
            entity.HasKey(e => new { e.RoleKey, e.PermissionKey });

            entity.Property(e => e.PermissionKey)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.Created)
                .HasColumnType("datetime")
                .HasColumnName("created");

            entity.HasOne(d => d.PermissionKeyNavigation).WithMany(p => p.PermissionRoles)
                .HasForeignKey(d => d.PermissionKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermissionRoles_Permission");

            entity.HasOne(d => d.RoleKeyNavigation).WithMany(p => p.PermissionRoles)
                .HasForeignKey(d => d.RoleKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermissionRoles_Roles");
        });

        modelBuilder.Entity<Roles>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Created)
                .HasComment("Time of Create")
                .HasColumnType("datetime")
                .HasColumnName("created");
            entity.Property(e => e.Description)
                .HasMaxLength(30)
                .IsFixedLength();
            entity.Property(e => e.Rolelevel).HasColumnName("rolelevel");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserIdent).HasName("PK__User__1C1A74760950743A");

            entity.Property(e => e.UserIdent).HasMaxLength(255);
            entity.Property(e => e.UsrEmail).HasMaxLength(50);
            entity.Property(e => e.UsrGroup).HasMaxLength(50);
            entity.Property(e => e.UsrInfo).HasMaxLength(50);
            entity.Property(e => e.UsrName)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.UsrRegion).HasMaxLength(50);

            entity.HasMany(d => d.Cost).WithMany(p => p.UsrIdent)
                .UsingEntity<Dictionary<string, object>>(
                    "UserCost",
                    r => r.HasOne<Costunit>().WithMany()
                        .HasForeignKey("CostId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_UserCost_Costunit"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UsrIdent")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_User_UserCost"),
                    j =>
                    {
                        j.HasKey("UsrIdent", "CostId");
                        j.IndexerProperty<string>("UsrIdent")
                            .HasMaxLength(255)
                            .HasColumnName("usrIdent");
                        j.IndexerProperty<int>("CostId").HasColumnName("costId");
                    });

            entity.HasMany(d => d.Role).WithMany(p => p.UserIdent)
                .UsingEntity<Dictionary<string, object>>(
                    "UserRoles",
                    r => r.HasOne<Roles>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRoles_Roles"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserIdent")
                        .HasConstraintName("FK_UserRoles_User"),
                    j =>
                    {
                        j.HasKey("UserIdent", "RoleId");
                        j.IndexerProperty<string>("UserIdent").HasMaxLength(255);
                        j.IndexerProperty<int>("RoleId").HasColumnName("RoleID");
                    });
        });

        modelBuilder.Entity<WorkArea>(entity =>
        {
            entity.Property(e => e.WorkAreaId).HasColumnName("WorkAreaID");
            entity.Property(e => e.Abteilung).HasMaxLength(255);
            entity.Property(e => e.Bereich).HasMaxLength(255);
            entity.Property(e => e.Sort).HasColumnName("SORT");

            entity.HasMany(d => d.User).WithMany(p => p.WorkArea)
                .UsingEntity<Dictionary<string, object>>(
                    "UserWorkArea",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserWorkArea_User"),
                    l => l.HasOne<WorkArea>().WithMany()
                        .HasForeignKey("WorkAreaId")
                        .HasConstraintName("FK_UserWorkArea_WorkArea"),
                    j =>
                    {
                        j.HasKey("WorkAreaId", "UserId").HasName("PK_UserUnion");
                        j.IndexerProperty<int>("WorkAreaId").HasColumnName("WorkAreaID");
                        j.IndexerProperty<string>("UserId")
                            .HasMaxLength(255)
                            .HasColumnName("UserID");
                    });
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}